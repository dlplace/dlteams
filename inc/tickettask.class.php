<?php
/*
 -------------------------------------------------------------------------
 DLTeams plugin for GLPI
 -------------------------------------------------------------------------
 LICENSE : This file is part of DLTeams Plugin.

 DLTeams Plugin is a GNU Free Copylefted software.
 It disallow others people than DLPlace developers to distribute, sell,
 or add additional requirements to this software.
 Though, a limited set of safe added requirements can be allowed, but
 for private or internal usage only ;  without even the implied warranty
 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 You should have received a copy of the GNU General Public License
 along with DLTeams Plugin. If not, see <http://www.gnu.org/licenses/>.
 --------------------------------------------------------------------------
  @package   dlteams
  @author    DLPlace developers
  @copyright Copyright (c) 2022 DLPlace
  @inspired	 DPO register plugin (Karhel Tmarr) & gdprropa (Yild)
  @license   GPLv3+ http://www.gnu.org/licenses/gpl.txt
  @link      https://github.com/dlplace/dlteams
  @since     2021
 --------------------------------------------------------------------------
 */

class PluginDlteamsTicketTask extends CommonITILTask
{
    public static $rightname = 'tickettask';
    public $dohistory = true;
    protected $usenotepad = true;

    public function __construct()
    {
        self::forceTable(TicketTask::getTable());
    }

    static function canCreate()
    {
        return true;
    }

    static function canView()
    {
        return true;
    }

    static function canUpdate()
    {
        return true;
    }

    static function canDelete()
    {
        return true;
    }

    static function canPurge()
    {
        return true;
    }

    function canCreateItem()
    {
        return true;
    }

    function canViewItem()
    {
        return true;
    }

    function canUpdateItem()
    {
        return true;
    }

    function canDeleteItem()
    {
        return true;
    }

    function canPurgeItem()
    {
        return true;
    }

    public static function getTypeName($nb = 0)
    {
        return _n('Tâche', 'Tâches', $nb);
    }

    public static function getIcon()
    {
        return 'fas fa-tasks';
    }

    public static function getAdditionalMenuLinks()
    {
        $links = [];

        // ajout d'un bouton ajouter une planification -> ne fonctionne pas -> bouton en bas
        /* $image = "<i class='fas fa-file-signature fa-1x' title='" . __('Ajouter une planification', 'dlteams') . "'></i><span>Ajouter une planification</span>";
        $links[$image] = 'add_tickettask_plannification'*/

        if (Planning::canView()) {
            $title = Planning::getTypeName(Session::getPluralNumber());
            $planning = "<i class='fa far fa-calendar-alt pointer' title='$title'>
                       </i><span>Planning</span>";
            $links["$planning"] = Planning::getSearchURL(false);
        }


        echo "<script>
                        \$(document).ready(function () {
                            // Attendre que la page soit complètement chargée
                            \$('a[href^=\"/front/planning.php\"]').attr('target', '_blank');
                        });
                    </script>";
        return $links;
    }

    public function getName($options = [])
    {
        $ticket = new Ticket();
        $ticket->getFromDB($this->fields["tickets_id"]);
        // $text = isset($this->fields["timeline_position"]) ? sprintf('#%s', $this->fields["timeline_position"]) : "";
        $text = isset($this->fields["id"]) ? sprintf("%s ", $this->fields["id"]) : "";
		$text .= isset($ticket->fields["id"]) ? sprintf("\n de l'évènement %s: %s", $this->fields["tickets_id"], $ticket->fields["name"]) : "";
        return $text; // TODO: Change the autogenerated stub
    }

    public static function getTable($classname = null)
    {
        return TicketTask::getTable();
    }


    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)
    {
        switch ($item->getType()) {
            case Ticket::class:
                if (!$withtemplate) {
                    if (Session::haveRight($item::$rightname, READ)) {
                        if ($_SESSION['glpishow_count_on_tabs']) {
                            return static::createTabEntry(static::getTypeNameForClass(), 0);
                        }
                        return static::getTypeNameForClass();
                    }
                }
                break;
        }

        return '';
    }


    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)
    {
        switch ($item->getType()) {
            case Ticket::class:
                self::showForItem($item);
                break;
        }
    }

    static function showForItem(CommonDBTM $item, $withtemplate = 0)
    {
        $timeline = $item->getTimelineItems();
        $cumul_temps = 0;
        foreach ($timeline as $key => $timeline_item){
            if($timeline_item["type"] == TicketTask::class){
                $cumul_temps+= $timeline_item["item"]["actiontime"];

                $timeline[$key]["item"]["date_str"] = date('d/m/Y H:i:s', strtotime($timeline_item["item"]["date"]))??"--";
                $group = new Group();
                $group->getFromDB($timeline_item["item"]["groups_id_tech"]);
                $timeline[$key]["item"]["groupe_str"] = isset($group->fields["name"])?$group->fields["name"]:"--";

                $user = new User();
                $user->getFromDB($timeline_item["item"]["users_id_tech"]);
                $timeline[$key]["item"]["acteur_str"] = $timeline[$key]["item"]["users_id_tech"]? sprintf("%s %s", $user->fields["firstname"], $user->fields["realname"]):"--";
                $timeline[$key]["item"]["duree_str"] = PluginDlteamsTicketTask_Planning::convertirTemps($timeline[$key]["item"]["actiontime"])??"--";
                if($timeline_item["item"]["begin"]){
                    $planif_fin = new DateTime($timeline_item["item"]["begin"]);
                    $planif_fin->modify("+".$timeline_item["item"]["actiontime"]." second");
                }
                $timeline[$key]["item"]["plannif_str"] = sprintf("%s => %s", date('d/m/Y H:i', strtotime($timeline_item["item"]["begin"]??"")),
                    isset($planif_fin)?$planif_fin->format('d/m/Y H:i'):"");

/*                highlight_string("<?php\n\$data =\n" . var_export($items_list, true) . ";\n?>");*/

//                var_dump($timeline["plannif_str"]);
//                die();
            }
        }

        $cumul_formatted = PluginDlteamsTicketTask::convertirTimestampToHour($cumul_temps);
        \Glpi\Application\View\TemplateRenderer::getInstance()->display('@dlteams/components/itilobject/layout.html.twig', [
            'item'               => $item,
            'timeline_itemtypes' => $item->getTimelineItemtypes(),
            'legacy_timeline_actions'  => $item->getLegacyTimelineActionsHTML(),
            'params'             => [],
            'entities_id'        => Session::getActiveEntity(),
            'timeline'           => $timeline,
            'cumul_formatted'    => $cumul_formatted,
            'itiltemplate_key'   => Ticket::getTemplateFormFieldName(),
            'itiltemplate'       => $item->getITILTemplateToUse(
            $options['template_preview'] ?? 0,
                $item->fields['type'],
            $item->fields['itilcategories_id'],
            $item->fields['entities_id'],
        ),
//            'predefined_fields'  => Toolbox::prepareArrayForInput($predefined_fields),
//            'ticket_ticket'      => new Ticket_Ticket(),
//            'item_ticket'        => $item_ticket,
//            'sla'                => $sla,
//            'ola'                => $ola,
//            'canupdate'          => $canupdate,
//            'can_requester'      => $can_requester,
//            'canpriority'        => $canpriority,
//            'canassign'          => $canassign,
//            'canassigntome'      => $canassigntome,
//            'load_kb_sol'        => $options['load_kb_sol'] ?? 0,
//            'userentities'       => $userentities,
//            'has_pending_reason' => PendingReason_Item::getForItem($this) !== false,
        ]);
    }

    static function getTypeNameForClass($nb = 0)
    {
        return __("Tâches", 'dlteams');
    }

    public function showForm($ID, array $options = [])
    {
//        $showalign = $this->fields["tickettasks_id"] ? "left" : "right";
        $parent = new TicketTask();
        $parent->getFromDB($this->fields["tickettasks_id"]);
        global $CFG_GLPI;
        $this->initForm($ID, $options);
        $this->showFormHeader($options);

        echo "<input type='hidden' name='itemtype' value='" . Ticket::class . "'>";
        echo "<table style='width: 100%'>";
        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Évènement", 'dlteams') . "</td>";

        $rand = mt_rand();
        echo "<td style='text-align:left'>";
        if (!$this->fields["tickettasks_id"]) {
            Ticket::dropdown([
                'name' => 'tickets_id',
                'rand' => $rand,
                'value' => $this->fields["tickets_id"],
                'entity' => Session::getActiveEntity(),
                'width' => '500px',
                'url' => $CFG_GLPI['root_doc'] . "/marketplace/dlteams/ajax/getDropdownValue.php"
            ]);
        } else {
            $content = new Ticket();
            $content->getFromDB($this->fields['tickets_id']);
            echo "<a target='_blank' href=\"" . Ticket::getFormURLWithID($this->fields['tickets_id']) . "\">" . $content->getName() . "</a>" ; // . " (" . $content->getId() . ")";
        }
        echo "</td>";
        echo "</tr>";

        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Contenu", 'dlteams') . "</td>";
        echo "<td style='text-align: left'>"; //. "<td colspan = 3>";
        $content_id = "content$rand";
        if (!$this->fields["tickettasks_id"])
            Html::textarea(['name' => 'content',
                'value' => \Glpi\RichText\RichText::getSafeHtml($this->fields['content'], true),
                'rand' => $rand,
                'editor_id' => $content_id,
                'enable_fileupload' => true,
                'enable_richtext' => true,
                'cols' => 100,
                'rows' => 15
            ]);
        else {
            echo "<a target='_blank' href=\"" . TicketTask::getFormURLWithID($this->fields['tickettasks_id']) . "\">" . \Glpi\RichText\RichText::getSafeHtml($this->fields['content'], false) . "</a>";
			$parent = new TicketTask();
            $parent->getFromDB($this->fields['tickettasks_id']);
            $sanshtml = \Glpi\RichText\RichText::getSafeHtml($parent->fields['content'], false);
			echo "-------<br> " ; // echo "<br>"."(".$parent->fields['id'].") " ; 
			echo sprintf("<a (%s) %s", $parent->fields['id'], $sanshtml. "</a>");
		}
        echo "</td>";
        echo "<td width='30%'>" . " " . "</td>";
        echo "</tr>";
        echo "</table>";

        echo "<table style='width: 60%'>";
        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Gabarit", 'dlteams') . "</td>";
        echo "<td style='text-align: left'>";
        if (!$this->fields["tickettasks_id"])
            TaskTemplate::dropdown([
                'name' => 'tasktemplates_id',
                'rand' => $rand,
                'value' => $this->fields["tasktemplates_id"],
                'entity' => Session::getActiveEntity(),
                'width' => '250px',
            ]);
        else {
            $element = new TaskTemplate();
            if (isset($parent->fields['tasktemplates_id'])) {
                $element->getFromDB($parent->fields['tasktemplates_id']);
                echo "<a target='_blank' href=\"" . TaskTemplate::getFormURLWithID($parent->fields['tasktemplates_id']) . "\">" . $element->getName() . "</a>";
            } else
                echo "--";
        }
        // echo htmlspecialchars($this->fields['tasktemplates_id']);
        echo "</td>";

        // echo "<td width='15%'>" . " " . "</td>";
        echo "<td style='text-align:right'>" . __("Catégorie", 'dlteams') . "</td>";
        echo "<td style='text-align: left'>";
        if (!$this->fields["tickettasks_id"])
            TaskCategory::dropdown([
                'name' => 'taskcategories_id',
                'rand' => $rand,
                'value' => $this->fields["taskcategories_id"],
                'entity' => Session::getActiveEntity(),
                'width' => '250px'
            ]);
        else {
            if (isset($parent->fields['taskcategories_id'])) {
                $element = new TaskCategory();
                $element->getFromDB($parent->fields['taskcategories_id']);
                echo "<a target='_blank' href=\"" . TaskCategory::getFormURLWithID($parent->fields['taskcategories_id']) . "\">" . $element->getName() . "</a>";
            } else
                echo "--";
        }
        // echo htmlspecialchars($this->fields['taskcategories_id']);
        echo "</td>";
        echo "</tr>";

        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Statut", 'dlteams') . "</td>";
        echo "<td style='text-align:left'>";
        Planning::dropdownState('state', $this->fields["state"], true, [
            'width' => '250px',
        ]);
        echo "</td>";
        echo "<td width='15%'>" . " " . "</td>";
        echo "</tr>";

        echo "<br/>";
        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Acteur", 'dlteams') . "</td>";
        echo "<td style='text-align:left'>";
        User::dropdown([
            'addicon' => true,
            'name' => 'users_id_tech',
            'value' => $this->fields['users_id_tech'],
            'entity' => Session::getActiveEntity(),
            'right' => 'all',
            'width' => '250px',
        ]);
        echo "</td>";
        // echo "<td style='width: 15px'></td>";
        echo "<td style='text-align:right'>" . __("Groupe", 'dlteams') . "</td>";
        echo "<td style='text-align:left'>";
        Group::dropdown([
            'name' => 'groups_id_tech',
            'value' => $this->fields['groups_id_tech'],
            'entity' => Session::getActiveEntity(),
            'right' => 'all',
            'width' => '250px',
        ]);
        echo "</td>";
        echo "</tr>";

        echo "<tr>";
        echo "<td style='text-align:right'>" . __("Échéance", 'dlteams') . "</td>";
        echo "<td style='text-align:left' width='250px'>";
        Html::showDateTimeField('date', [
		     // $timeline[$key]["item"]["date_str"] = date('d/m/Y H:i:s', strtotime($timeline_item["item"]["date"]))??"--";
            'value' => date('d/m/Y H:i', strtotime($this->fields["date"])) != '' ? $this->fields["date"] : '',
            'rand' => $rand,
            'display' => true,
			'datatype' => 'datetime',
        ]);

        echo "</td>";
        echo "<td style='text-align:right'>" . __("Durée", 'dlteams') . "</td>";
        echo "<td style='text-align:left'  width='100px'>";
        Dropdown::showTimeStamp('estimate_duration', [
            'icon_label' => true,
            'rand' => $rand,
            'min' => 0,
            'max' => 8 * constant('HOUR_TIMESTAMP'),
            'addfirstminutes' => true,
            'inhours' => true,
            'value' => $this->fields["estimate_duration"],
            'toadd' => array_map(function ($i) {
                return $i * HOUR_TIMESTAMP;
            }, range(9, 100)),
        ]);
        echo "</td>";
        echo "</tr>";
        echo "</table>";

        echo "<div id='viewplanPlanif' ></div>";
        echo "<div style='display: flex; flex-direction: column; gap: 10px; text-align: start'>";

        echo "<div class='center firstbloc' style='display: flex; flex-direction: row; gap: 5px'>";
//        echo "<a class='btn btn-primary' href='#'>" .
//            _x('button', 'Voir planning') . "</a>";

        // Planification de la tache
        if (!$this->fields["begin"]) {
            echo "<table style='width: 20%; margin-top: 20px'>";
            echo "<tr class='tab_bg_2'><td>";
            echo "<button id='planplanif' class='btn btn-outline-secondary text-truncate' type='button'>
                              <i class='fas fa-calendar'></i>
                              <span>" . __('Plan this task') . "</span>
                           </button>";
            echo "</td>";
            echo "</tr>";
            echo "</table>";
        }

        $in_modal = isset($options["in_modal"])?$options["in_modal"]:false;
        $width=$in_modal?'100%':'70%';
        // Modification et Dé-planification de la tâche
        if ($this->fields["begin"]) {
            echo "<table style='width: $width' align='left' class='tab_cadre' >";
            echo "<tr class='tab_bg_2'><td width='200px'>";
            echo "<button class='btn btn-outline-warning' type='submit' name='unplan'
                                 onclick='return confirm('" . __('Confirm the deletion of planning?') . "');'>
                              <i class='fas ti ti-calendar-off'></i>
                              <span>" . __('Unplan') . "</span>
                           </button>";
            echo "</td>";

            /*echo "<td class='right'>" . __('Date début') . "</td><td>";
            echo $this->fields["begin"];
            echo "</td><td></td><td>";
            echo __('Durée');
            echo "</td>";
            echo "<td>";
            echo $this->convertirTemps($this->fields["actiontime"]);
            echo "</td>";*/

            echo "<td style='text-align:left'>" . __("Date planning", 'dlteams') . "</td>";
            echo "<td style='text-align:left' width='270px'>";
            Html::showDateTimeField('begin', [
                // 'value' => sprintf ("%s", date('d/m/Y H:i', strtotime($this->fields["begin"]))) != '' ? $this->fields["begin"] : '',
				'value' => date('d/m/Y H:i') != '' ? $this->fields["begin"] : '',
                // 'rand' => $rand,
                'display' => true,
				'datatype' => 'datetime',
            ]);

            echo "</td>";
            echo "<td style='text-align:right'>" . __("Durée", 'dlteams') . "</td>";
            echo "<td style='text-align:left'  width='100px'>";
            Dropdown::showTimeStamp('actiontime', [
                'icon_label' => true,
                'rand' => $rand,
                'min' => 0,
                'max' => 8 * constant('HOUR_TIMESTAMP'),
                'addfirstminutes' => true,
                'inhours' => true,
                'value' => $this->fields["actiontime"],
                'toadd' => array_map(function ($i) {
                    return $i * HOUR_TIMESTAMP;
                }, range(9, 100)),
            ]);
            echo "</td>";

            echo "<td class='right'>" . __('Fin') . "</td><td>";
			echo sprintf("%s", date('d-m-Y H:i', strtotime($this->fields["end"])));
            echo "</td>";

            echo "<td>" . __('Rappel') . "</td>";
            echo "<td>";
            $pr = new PlanningRecall();
            $pr->getFromDBByCrit([
                "itemtype" => TicketTask::class,
                "items_id" => $this->fields["id"]
            ]);
            PlanningRecall::dropdown([
                "itemtype" => TicketTask::class,
                "items_id" => $this->fields["id"]
            ]);
//            echo $this->convertirTemps(isset($pr->fields["before_time"]) ? $pr->fields["before_time"] : "");
            echo "</td>";

            echo "</tr>";
            echo "</table>";
        }

        echo "</div>";

        // une fois planifié, on peut en ajouter d'autres
        if (!$this->fields["tickettasks_id"] && $this->fields["begin"]) {
            echo "<table style='width:100%'>";
            echo "<td align='center'>";
            echo "<button name='add_tickettask_plannification' id='add_tickettask_plannification' style='width: fit-content;' ; class='btn btn-primary'>" .
                _x('button', 'Ajouter planification') . "</button>";
            echo "</td></table>";
        }

        echo "<script>";
        $queryString = http_build_query([
            "itemtype" => TicketTask::class,
            "items_id" => $this->fields["id"],
        ]);

        echo "
                 $(document).ready(function(e){
                     $('#dropdown_tasktemplates_id" . $rand . "').change(function(){
                        let value = $(this).val();
                        $.ajax({
                       url: '/ajax/task.php',
                       type: 'POST',
                       data: {
                          tasktemplates_id: value,
                          items_id: $('#dropdown_tickets_id" . $rand . "').val(),
                          itemtype: 'Ticket'
                       }
                    }).done(function (data) {
                        if (data.content !== undefined) {
                            // set textarea content
                            setRichTextEditorContent('" . $content_id . "', data.content);
                        }
        
                        if (data.taskcategories_id !== undefined) {
                            // set category
                            const taskcategories_id = isNaN(parseInt(data.taskcategories_id))
                                ? 0
                                : parseInt(data.taskcategories_id);
        
                             //need to create new DOM option, because SELECT is remotely-sourced (AJAX)
                             //see : https://select2.org/programmatic-control/add-select-clear-items#preselecting-options-in-an-remotely-sourced-ajax-select2
                             var newOption = new Option(data.taskcategories_name, taskcategories_id, true, true);
                             $('#dropdown_taskcategories_id" . $rand . "').append(newOption).trigger('change');
                        }

                        if (data.is_private !== undefined) {
                            // set is_private
                            $('#is_private_" . $rand . "').prop('checked', data.is_private == '0'? false: true);
                            }

                            if (data.state !== undefined) {
                                // Set state
                                $('#dropdown_state" . $rand . "').trigger('setValue', data.state);
                            }
                            
                            if (data.actiontime !== undefined) {
                                // Set duration
                                $('#dropdown_actiontime" . $rand . "').trigger('setValue', data.actiontime);
                            }
                            
                            if (data.users_id_tech !== undefined) {
                                // Set user
                                $('#dropdown_users_id_tech" . $rand . "').trigger('setValue', data.users_id_tech);
                            }
                            
                            if (data.groups_id_tech !== undefined) {
                                // Set group
                                $('#dropdown_groups_id_tech" . $rand . "').trigger('setValue', data.groups_id_tech);
                            }
                        });
                    });


                    const observer = new MutationObserver((mutations) => {
        
        $('#add_tickettask_plannification').off('click').click(function(e){
                        e.preventDefault();
                        
                        var modalId = glpi_ajax_dialog({
                            dialogclass: 'modal-lg',
                            bs_focus: false,
                            url: '/marketplace/dlteams/ajax/tickettask_plannif.php?" . $queryString . "',
                            title: i18n.textdomain('dlteams').__('Ajouter une planification', 'dlteams'),
                            close: function () {
            
                            },
                            fail: function () {
                                // displayAjaxMessageAfterRedirect();
                            }
                        });
                    });
                    
                    
             $('#subtaskplanplanif').off('click').click(function(e){
                       e.preventDefault();
                                              
                                    $('#subtaskviewplanPlanif').load('/ajax/planning.php', {
                                        action: 'add_event_classic_form',
                                        form: 'followups',
                                        entity: " . Session::getActiveEntity() . ",
                                        itemtype: '" . TicketTask::class . "',
                                        items_id: '" . $this->fields["id"] . "'
                                    });
                                    $(this).hide();
                   });
        });
        
        // Configuration de l'observateur : surveiller l'ajout et la suppression d'éléments, ainsi que les changements d'attribut
        const config = {
            childList: true,
            attributes: true,
            subtree: true // Observer les mutations sur des descendants également
        };
        
        // Commencer l'observation sur l'élément body pour couvrir tout le DOM
        observer.observe(document.body, config);
                    
                     $('#planplanif').click(function(e){
                       e.preventDefault();
                                              
                                    $('#viewplanPlanif').load('/ajax/planning.php', {
                                        action: 'add_event_classic_form',
                                        form: 'followups',
                                        entity: " . Session::getActiveEntity() . ",
                                        itemtype: '" . TicketTask::class . "',
                                        items_id: '" . $this->fields["id"] . "'
                                    });
                                    $(this).hide();
                   });
                });
            ";
        echo "</script>";


        echo "<style>
            #page .tab_cadre_fixe .select2-container .select2-selection.select2-selection--single, .qtip .tab_cadre_fixe .select2-container .select2-selection.select2-selection--single, .modal .modal-body .tab_cadre_fixe .select2-container .select2-selection.select2-selection--single {
                max-width: 100%;
            }
        </style>";

        // Ajout du bandeau "créé par" et "modifié par"
        echo "<div>";
        echo "<p style='margin-top: 10px; text-align: start '>";
        $user = new User();
        $user->getFromDB($this->fields["users_id"]);
        if (isset($user->fields["firstname"]) && $user->fields["realname"])
            echo sprintf("Créé le %s par %s %s | ", date('d-m-Y H:i', strtotime($this->fields["date_creation"])), $user->fields["firstname"], $user->fields["realname"]);

        // $user = new User();
        $user->getFromDB($this->fields["users_id_editor"]);
        if (isset($user->fields["firstname"]) && $user->fields["realname"])
            echo sprintf("Mis à jour le %s par %s %s", date('d-m-Y H:i', strtotime($this->fields["date_mod"])), $user->fields["firstname"], $user->fields["realname"]);
        echo "</p>";
        echo "</div>";


//        $options["addbuttons"] = [
//            'add_planification' => 'Ajouter une planification'
//        ];
        $this->showFormButtons($options);


        return true;

    }


    public function convertirTemps($tempsEnSecondes)
    {
        if ($tempsEnSecondes && is_integer($tempsEnSecondes)) {
            $heures = floor($tempsEnSecondes / 3600);
            $minutes = floor(($tempsEnSecondes % 3600) / 60);
            $secondes = $tempsEnSecondes % 60;
            return sprintf("%02d:%02d", $heures, $minutes);
        }
        return "";
    }

    public static function convertirTimestampToHour($tempsEnSecondes)
    {
        if ($tempsEnSecondes && is_integer($tempsEnSecondes)) {
            $heures = floor($tempsEnSecondes / 3600);
            $minutes = floor(($tempsEnSecondes % 3600) / 60);
            $secondes = $tempsEnSecondes % 60;
            return sprintf("%02d:%02d", $heures, $minutes);
        }
        return "";
    }

    public function defineTabs($options = [])
    {
        $ong = [];
        $ong = array();
        $this->addDefaultFormTab($ong);
        // $this->addStandardTab('PluginDlteamsElementsRGPD', $ong, $options);
        // $this->addStandardTab(PluginDlteamsTicket_Item::class, $ong, $options);
        /*$dbu = new DbUtils();
        $count = $dbu->countElementsInTable(static::getTable(), ['tickettasks_id' => $this->getID()]);
        if ($count > 0)
            $this->addStandardTab(PluginDlteamsTicketTask_Planning::class, $ong, $options);*/
        // var_dump ($this->fields["tickettasks_id"]); // die;
        if ($this->fields["tickettasks_id"] === NULL) {
            $this->addStandardTab(PluginDlteamsTicketTask_Planning::class, $ong, $options);
        }
//        else
            $this->addStandardTab(PluginDlteamsMessagerie::class, $ong, $options);
//        $this->addStandardTab('PluginDlteamsTicketTask_Plannification', $ong, $options);
        $this->addStandardTab('Notepad', $ong, $options);
        $this->addStandardTab('Log', $ong, $options);

        return $ong;
    }

//    public static function addWhere($link = "", $nott = "", $itemtype = "", $ID = null, $searchtype = "", $val = "", $meta = 0)
//    {
//
//
//            $entity_filter = " AND `glpi_tickets`.`entities_id` = " . Session::getActiveEntity();
//
//        $where = "";
//        if($ID == 12){
//            $where.= " `".TicketTask::getTable()."`.`state` = ".$val.$entity_filter;
//        }
//        return $where;
//    }


    /**
     * Get default values to search engine to override
     **/
    public static function getDefaultSearchRequest()
    {
        $search = [
            'criteria' => [
                0 => [
                    'field' => 12,
                    'searchtype' => 'equals',
                    'value' => Planning::TODO
                ],
                /*1 => [
                    'field' => 9,
                    'searchtype' => 'contains',
                    'value' => ''
                ],
                2 => [
                    'field' => 10,
                    'searchtype' => 'contains',
                    'value' => ''
                ],*/
                3 => [
                    'field' => 0,
                    'searchtype' => 'contains',
                    'value' => ''
                ],
                /*4 => [
                    'field' => 16,
                    'searchtype' => 'equals',
                    'value' => '0'
                ],*/
            ],
            'sort' => 20,
            'order' => 'ASC'
        ];

        if (Session::haveRight(self::$rightname, Ticket::READALL)) {
            $search['criteria'][0]['value'] = 'notold';
        }
        return $search;
    }

    function rawSearchOptions()
    {
        $tab = [];

        $tab[] = [
            'id' => 'common',
            'name' => __("Characteristics")
        ];
//
        $tab[] = [
            'id' => '20',
            'table' => $this->getTable(),
            'field' => 'date',
            'name' => __('Echéance'),
            'searchtype' => 'equals',
            'datatype' => 'datetime'
        ];
//
        $tab[] = [
            'id' => '1',
            'table' => static::getTable(),
            'field' => 'id',
            'datatype' => 'itemlink',
            'itemlink_type' => PluginDlteamsTicketTask::class,
            'name' => __("ID"),
            'massiveaction' => false,
            'searchtype' => 'contains'
        ];
//
//
        $tab[] = [
            'id' => '3',
            'table' => static::getTable(),
            'field' => 'content',
            'datatype' => 'text',
            'htmltext' => true,
            // 'toview' => true,
            // 'linkfield' => 'id',
            // 'datatype' => 'itemlink',
            'name' => __("Contenu"),
            'forcegroupby' => true,
            'massiveaction' => true,
        ];
//
//
        $tab[] = [
            'id' => '4',
            'table' => 'glpi_tickets',
            'field' => 'name',
            'datatype' => 'dropdown',
            'name' => __("Evenement"),
            'massiveaction' => false,
        ];
//
        $tab[] = [
            'id' => '5',
            'table' => TaskTemplate::getTable(),
            'field' => 'name',
            'datatype' => 'dropdown',
            'name' => __("Gabarit"),
            'massiveaction' => false,
        ];

        $tab[] = [
            'id' => '8',
            'table' => static::getTable(),
            'field' => 'timeline_position',
            //'datatype' => 'itemlink',
            'name' => __("Num"),
            'massiveaction' => false,
        ];
//
//
        $tab[] = [
            'id' => '9',
            'table' => User::getTable(),
            'field' => 'name',
            'datatype' => 'dropdown',
            'linkfield' => 'users_id_tech',
            'name' => __("Acteur"),
            'massiveaction' => true,
        ];

        $tab[] = [
            'id' => '10',
            'table' => Group::getTable(),
            'field' => 'name',
            'datatype' => 'dropdown',
            'linkfield' => 'groups_id_tech',
            'name' => __("Groupe"),
            'massiveaction' => true,
        ];
//
        $tab[] = [
            'id' => '11',
            'table' => static::getTable(),
            'field' => 'actiontime',
            'datatype' => 'timestamp',
//            'linkfield' => 'groups_id_tech',
            'name' => __("Durée"),
            'massiveaction' => true,
        ];
//
        $tab[] = [
            'id' => '12',
            'table' => static::getTable(),
            'field' => 'state',
            'name' => __('Status'),
//            'datatype'           => 'specific',
//            'searchtype'         => ['equals'],
//            'searchequalsonfield' => true,
            'massiveaction'      => true,
//            'forcegroupby'       => true,
        ];
//
//        $tab[] = [
//            'id' => '13',
//            'table' => static::getTable(),
//            'field' => 'date_mod',
//            'datatype' => 'datetime',
////            'linkfield' => 'groups_id_tech',
//            'name' => __("Date MAJ"),
//            'massiveaction' => true,
//        ];
//
//        $tab[] = [
//            'id' => '14',
//            'table' => User::getTable(),
//            'field' => 'name',
//            'datatype' => 'dropdown',
//            'linkfield' => 'users_id_tech',
//            'name' => __("Créé par"),
//            'massiveaction' => true,
//        ];
//
//        $tab[] = [
//            'id' => '15',
//            'table' => Ticket::getTable(),
//            'field' => 'id',
//            'datatype' => 'itemlink',
////            'linkfield' => 'users_id_tech',
//            'name' => __("Evt"),
//            'massiveaction' => false,
//        ];
//
//        $tab[] = [
//            'id' => '16',
//            'table' => static::getTable(),
//            'field' => 'tickettasks_id',
//            'datatype' => 'itemlink',
//            'name' => __("Sous tâche de"),
//            'massiveaction' => false,
//        ];




        $entityId = $_SESSION["glpiactive_entity"];

        return $tab;
    }

}
