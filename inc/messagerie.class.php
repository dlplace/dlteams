<?php

/**
 * ---------------------------------------------------------------------
 *
 * GLPI - Gestionnaire Libre de Parc Informatique
 *
 * http://glpi-project.org
 *
 * @copyright 2015-2023 Teclib' and contributors.
 * @copyright 2003-2014 by the INDEPNET Development Team.
 * @licence   https://www.gnu.org/licenses/gpl-3.0.html
 *
 * ---------------------------------------------------------------------
 *
 * LICENSE
 *
 * This file is part of GLPI.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * ---------------------------------------------------------------------
 */

/// Class KnowbaseItem_Comment
/// since version 9.2
class PluginDlteamsMessagerie extends CommonDBTM
{
    public function canAddItem($type)
    {
        return parent::canAddItem($type); // TODO: Change the autogenerated stub
    }

    public function canCreateItem()
    {
        return parent::canCreateItem(); // TODO: Change the autogenerated stub
    }

    public function canUpdateItem()
    {
        return parent::canUpdateItem(); // TODO: Change the autogenerated stub
    }

    public function canDeleteItem()
    {
        return parent::canDeleteItem(); // TODO: Change the autogenerated stub
    }

    public function canPurgeItem()
    {
        return true;
    }

    public function canViewItem()
    {
        return true;
    }

    public static function canCreate()
    {
        return true;
    }

    public static function canView()
    {
        return true;
    }

    public static function canUpdate()
    {
        return true;
    }

    public static function canDelete()
    {
        return true;
    }

    public static function canPurge()
    {
        return true;
    }

    public function __construct()
    {
        parent::forceTable(ITILFollowup::getTable());
    }

    public static function getTypeName($nb = 0)
    {
        return _n('Messages', 'Messages', $nb);
    }

    public static function getTable($classname = null)
    {
        return ITILFollowup::getTable();
    }

    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)
    {
//        var_dump("ttt");
//        die();
//        if (!($item instanceof KnowbaseItem) || !$item->canComment()) {
//            return '';
//        }

        $nb = 0;
        if ($_SESSION['glpishow_count_on_tabs']) {
            $where = [];
//            if ($item->getType() == KnowbaseItem::getType()) {
//                $where = [
//                    'knowbaseitems_id' => $item->getID(),
//                    'language'         => null
//                ];
//            } else {
                $where = [
                    'items_id' => $item->fields['id'],
                    'itemtype'         => $item->getType()
                ];
//            }

            $nb = countElementsInTable(
                ITILFollowup::getTable(),
                $where
            );

            if($where['itemtype'] == PluginDlteamsTicketTask::class){
                $tickettask = new TicketTask();
                $tickettask->getFromDB($item->fields["id"]);

//           get planifications tasks
                $planification_task_query = [
                    "FROM" => TicketTask::getTable(),
                    "WHERE" => [
                        "tickettasks_id" => $item->fields["id"]
                    ]
                ];

                global $DB;
                $iterator = $DB->request($planification_task_query);

                $planif_count_messages = 0;
                foreach ($iterator as $pt){
                    $planif_count_messages+=count(self::getCommentsForKbItem($pt['id'], $where['itemtype'], null, true));
                }
                $nb+=$planif_count_messages;
            }

            if($where['itemtype'] == Ticket::class){
                $task_query = [
                    "FROM" => TicketTask::getTable(),
                    "WHERE" => [
                        "tickets_id" => $item->fields["id"]
                    ]
                ];

                global $DB;
                $iterator = $DB->request($task_query);
//            var_dump(count($iterator));
//            die();

                $planif_count_messages = 0;
                foreach ($iterator as $pt){
                    $planif_count_messages+=count(self::getCommentsForKbItem($pt['id'], PluginDlteamsTicketTask::class, null, !is_null($pt["tickettasks_id"]) && $pt["tickettasks_id"] != 0, true));
                }
            }
        }
        return self::createTabEntry(self::getTypeName($nb), $nb);
    }


    public static function showCentralList()
    {
        /** @var \DBmysql $DB */
        global $DB;

        $criteria = [
            'SELECT'          => [PluginDlteamsMessagerie::getTable().".*"],
            'DISTINCT'        => true,
            'FROM'            => PluginDlteamsMessagerie::getTable(),
//            'WHERE'           => $WHERE + getEntitiesRestrictCriteria('glpi_tickets'),
            'ORDERBY'         => PluginDlteamsMessagerie::getTable().'.date_mod DESC'
        ];

        $iterator = $DB->request($criteria);
        $total_row_count = count($iterator);
        $displayed_row_count = min((int)$_SESSION['glpidisplay_count_on_home'], $total_row_count);
        $displayed_row_count = 10;

        if ($total_row_count > 0) {
            $options  = [
                'criteria' => [],
                'reset'    => 'reset',
            ];
            $forcetab = '';


            $main_header = "<a href=\"" . Ticket::getSearchURL() ."\">" .
                            Html::makeTitle(__('Mes messages'), 0, 0) . "</a>";
            $twig_params = [
                'class'        => 'table table-borderless table-striped table-hover card-table',
                'header_rows'  => [
                    [
                        [
                            'colspan'   => 4,
                            'content'   => $main_header
                        ]
                    ]
                ],
                'rows'         => []
            ];

            $i = 0;
            if ($displayed_row_count > 0) {
                $twig_params['header_rows'][] = [
                    [
                        'content'   => __('ID'),
                        'style'     => 'width: 5%'
                    ],
                    [
                        'content'   => _n('Objet', 'Objets', 1),
                        'style'     => 'width: 15%'
                    ],
                    [
                        'content'   => _n('Elément', 'Eléments', 1),
                        'style'     => 'width: 15%'
                    ],
                    [
                        'content'   => _n('Contenu', 'Contenu', Session::getPluralNumber()),
                        'style'     => 'width: 20%'
                    ],
//                    __('Description')
                ];
                foreach ($iterator as $data) {

                    if(class_exists($data["itemtype"])) {
                        $row = [
                            'values' => []
                        ];
                        $element = new  $data["itemtype"]();
                        $element->getFromDB($data["items_id"]);
                        $element = isset($element->fields["name"]) ? $element->fields["name"] : $element->fields["id"];
                        $content = substr(html_entity_decode($data["content"]), 0, 30)??"--";
                        $row['class'] = 'tab_bg_2';
                        $row['values'] = [
                            [
                                'colspan' => 6,
                                'content' => '<tr class="">
                                          <td colspan="1" class="" style=""><div class="priority_block" style="border-color: #ffcece"><span style="background: #ffcece"></span>&nbsp;ID : ' . $data["id"] . '</div></td>
                                          <td colspan="1" class="" style="">' . $data["itemtype"]::getTypeName() . '</td>
                                          <td colspan="1" class="" style="">' . $element . '</td>
                                          <td colspan="1" class="" style=""><a href="#">' . $content . '</a></td>
                     </tr>'
                            ]
                        ];

                        $twig_params['rows'][] = $row;

                        $i++;
                        if ($i == $displayed_row_count) {
                            break;
                        }
                    }
                }
                if(count($iterator) == 0){
                    $row = [
                        'values' => []
                    ];

                    $row['class'] = 'tab_bg_2';
                    $row['values'] = [
                        [
                            'colspan' => 6,
                            'content' => "<i>" . __('No ticket in progress.') . "</i>"
                        ]
                    ];

                    $twig_params['rows'][] = $row;
                }
            }
            $output = \Glpi\Application\View\TemplateRenderer::getInstance()->render('components/table.html.twig', $twig_params);
//            if ($display) {
                echo $output;
//            } else {
//                return $output;
//            }
        }
    }

    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)
    {
        self::showForItem($item, $withtemplate);
        return true;
    }

    /**
     * Show linked items of a knowbase item
     *
     * @param $item                     CommonDBTM object
     * @param $withtemplate    integer  withtemplate param (default 0)
     **/
    public static function showForItem(CommonDBTM $item, $withtemplate = 0)
    {
//        var_dump($item->getType());
//        die();
        /** @var array $CFG_GLPI */
        global $CFG_GLPI;

        // Total Number of comments

            $where = [
                'items_id' => $item->fields['id'],
                'itemtype' => $item->getType(),
//                'language'         => $item->fields['language']
            ];



        $kbitem_id = $where['items_id'];
//        $kbitem = new KnowbaseItem();
        $kbitem = new self();
        $kbitem->getFromDB($kbitem_id);

        $number = countElementsInTable(
            ITILFollowup::getTable(),
            $where
        );

//        $cancomment = $kbitem->canComment();
        $cancomment = true;

        if ($cancomment) {
            echo "<div class='firstbloc'>";

//            $lang = null;
//            if ($item->getType() == KnowbaseItemTranslation::getType()) {
//                $lang = $item->fields['language'];
//            }

            echo self::getCommentForm($kbitem_id, $item->getType());
            echo "</div>";
        }


        // Output events
        echo "<div class='forcomments timeline_history'>";
        echo "<ul class='comments left'>";
        $comments = self::getCommentsForKbItem($where['items_id'], $where['itemtype']);

        if($where['itemtype'] == PluginDlteamsTicketTask::class){
            $tickettask = new TicketTask();
            $tickettask->getFromDB($kbitem_id);

//           get planifications tasks
            $planification_task_query = [
                "FROM" => TicketTask::getTable(),
                "WHERE" => [
                    "tickettasks_id" => $kbitem_id
                ]
            ];

            global $DB;
            $iterator = $DB->request($planification_task_query);
            foreach ($iterator as $pt){
                $comments = [
                    ...$comments,
                    ...self::getCommentsForKbItem($pt['id'], $where['itemtype'], null, true)];
            }
        }

        if($where['itemtype'] == Ticket::class){
            $task_query = [
                "FROM" => TicketTask::getTable(),
                "WHERE" => [
                    "tickets_id" => $kbitem_id
                ]
            ];

            global $DB;
            $iterator = $DB->request($task_query);
//            var_dump(count($iterator));
//            die();

            foreach ($iterator as $pt){
/*                highlight_string("<?php\n\$data =\n" . var_export($pt, true) . ";\n?>");*/
//                die();
                $comments = [
                    ...$comments,
                    ...self::getCommentsForKbItem($pt['id'], PluginDlteamsTicketTask::class, null, !is_null($pt["tickettasks_id"]) && $pt["tickettasks_id"] != 0, true)];
            }
        }

        // No comments in database
        if (count($comments) < 1) {
            $no_txt = __('No comments');
            echo "<div class='center'>";
            echo "<table class='tab_cadre_fixe'>";
            echo "<tr><th>$no_txt</th></tr>";
            echo "</table>";
            echo "</div>";
            return;
        }
//        var_dump($comments);
//        die();
        $html = self::displayComments($comments, $cancomment, $item::getType());
        echo $html;

        echo "</ul>";
        echo "<script type='text/javascript'>
              $(function() {
                 var _bindForm = function(form) {
                     form.find('input[type=reset]').on('click', function(e) {
                        e.preventDefault();
                        form.remove();
                        $('.displayed_content').show();
                     });
                 };

                 
                 $('.add_answer').on('click', function() {
                     
                    var _this = $(this);
                     console.log(_this.data(), 'data');
                    var _data = {
                       'kbitem_id': _this.data('kbitem_id'),
                       'answer'   : _this.data('id'),
                       'itemtype': _this.data('itemtype'),
                    };

                    if (_this.data('language') != undefined) {
                       _data.language = _this.data('language');
                    }

                    if (_this.parents('.comment').find('#newcomment' + _this.data('id')).length > 0) {
                       return;
                    }

                    $.ajax({
                       url: '/marketplace/dlteams/ajax/getMessagerieContent.php',
                       method: 'post',
                       cache: false,
                       data: _data,
                       success: function(data) {
                          var _form = $('<div class=\"newcomment ms-3\" id=\"newcomment'+_this.data('id')+'\">' + data + '</div>');
                          _bindForm(_form);
                          _this.parents('.h_item').after(_form);
                       },
                       error: function() { " .
            Html::jsAlertCallback(__('Contact your GLPI admin!'), __('Unable to load revision!')) . "
                       }
                    });
                 });

                 $('.edit_item').on('click', function() {
                    var _this = $(this);
                    var _data = {
                       'kbitem_id': _this.data('kbitem_id'),
                       'edit'     : _this.data('id'),
                       'itemtype': _this.data('itemtype'),
                    };

                    if (_this.data('language') != undefined) {
                       _data.language = _this.data('language');
                    }

                    if (_this.parents('.comment').find('#editcomment' + _this.data('id')).length > 0) {
                       return;
                    }

                    $.ajax({
                       url: '/marketplace/dlteams/ajax/getMessagerieContent.php',
                       method: 'post',
                       cache: false,
                       data: _data,
                       success: function(data) {
                          var _form = $('<div class=\"editcomment\" id=\"editcomment'+_this.data('id')+'\">' + data + '</div>');
                          _bindForm(_form);
                          _this
                           .parents('.displayed_content').hide()
                           .parent()
                           .append(_form);
                       },
                       error: function() { " .
            Html::jsAlertCallback(__('Contact your GLPI admin!'), __('Unable to load revision!')) . "
                       }
                    });
                 });


              });
            </script>";

        echo "</div>";
    }


    /**
     * Gat all comments for specified KB entry
     *
     * @param integer $kbitem_id KB entry ID
     * @param string  $lang      Requested language
     * @param integer $parent    Parent ID (defaults to 0)
     *
     * @return array
     */
    public static function getCommentsForKbItem($kbitem_id, $itemtype, $parent = null, $isplannif_comment = false, $ischildcomment = false)
    {
        /** @var \DBmysql $DB */
        global $DB;

        $where = [
            'items_id'  => $kbitem_id,
            'itemtype'          => $itemtype,
            'parent_comment_id' => $parent
        ];

        $db_comments = $DB->request(
            ITILFollowup::getTable(),
            $where + ['ORDER' => 'id ASC']
        );


        $comments = [];
        foreach ($db_comments as $db_comment) {
/*            highlight_string("<?php\n\$data =\n" . var_export($db_comment, true) . ";\n?>");*/
//            die();
            $db_comment['answers'] = self::getCommentsForKbItem($kbitem_id, $itemtype, $db_comment['id']);
/*            highlight_string("<?php\n\$data =\n" . var_export($db_comment['id'], true) . ";\n?>");*/
            $db_comment["isplannif_comment"] = $isplannif_comment;
            $db_comment["ischild_comment"] = $ischildcomment;
            $comments[] = $db_comment;
        }



        return $comments;
    }

    public static function compare_dates($a, $b) {
        $dateA = strtotime($a["date_creation"]);
        $dateB = strtotime($b["date_creation"]);

        if ($dateA == $dateB) {
            return 0;
        }
        return ($dateA < $dateB) ? -1 : 1;
    }

    /**
     * Display comments
     *
     * @param array   $comments   Comments
     * @param boolean $cancomment Whether user can comment or not
     * @param integer $level      Current level, defaults to 0
     *
     * @return string
     */
    public static function displayComments($comments, $cancomment, $itemtype, $level = 0)
    {
        $html = '';
        $html.= "<style>
        .avatar {
            --tblr-avatar-size: 2rem;
            --tblr-avatar-bg: var(--tblr-border-color-light);
            position: relative;
            width: var(--tblr-avatar-size);
            height: var(--tblr-avatar-size);
            font-size: calc(var(--tblr-avatar-size) / 2.8571428572);
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: #626976;
            text-align: center;
            text-transform: uppercase;
            vertical-align: bottom;
            user-select: none;
            background: var(--tblr-avatar-bg) no-repeat center / cover;
            border-radius: 4px;
        }
        
        
        #page .comments li, .qtip .comments li, .modal .modal-body .comments li {
            margin: 0;
            padding: 1rem;
            line-height: 2em;
            position: relative;
            clear: left;
        }
        .comment:not(.subcomment) {
            border-bottom: 1px solid #c9c9c9;
        }
        </style>
        ";

        usort($comments, ['PluginDlteamsMessagerie', 'compare_dates']);
        foreach ($comments as $comment) {
/*            highlight_string("<?php\n\$data =\n" . var_export($comment, true) . ";\n?>");*/
//            die();
            $user = new User();
            $user->getFromDB($comment['users_id']);

            $istickettask_plannif = false;
            if($comment["itemtype"] == PluginDlteamsTicketTask::class){
                $tt = new TicketTask();
                $tt->getFromDB($comment["items_id"]);
                if ($tt->fields["tickettasks_id"])
                    $istickettask_plannif = true;
            }
            if($istickettask_plannif){
                $substyle = "style='background-color: aliceblue;'";
            }
//            elseif(isset($comment["ischild_comment"]) && $comment["ischild_comment"]){
//                $substyle = "style='background-color: aliceblue;'";
//            }
            else
                $substyle = "";
            $html .= "<li $substyle class='comment" . ($level > 0 ? ' subcomment' : '') . "' id='kbcomment{$comment['id']}'>";
            $html .= "<div class='h_item left d-flex'>";
            if ($level === 0) {
                $html .= '<hr/>';
            }
            $html .= "<div class='h_info'>";
            $timestamp = $comment['date_creation']; // exemple de timestamp

            $currentDate = date('Y-m-d');
            $eventDate = date('Y-m-d', strtotime($timestamp??""));
            if($eventDate == $currentDate)
                $created_at = date('H:i', strtotime($timestamp));
            else
                $created_at = Html::convDateTime($comment['date_creation']);
//            if($comment["itemtype"] == PluginDlteamsTicketTask::class){
//                $html .= "<div style='white-space: nowrap'>";
//                echo "<a target='_blank' href='".TicketTask::getFormURLWithID($comment["items_id"])."'>".$comment["items_id"]."&nbsp;<i class='fa fa-external-link'></i></a>";
//                echo "</div>";
//            }
            $html .= "<div style='white-space: nowrap' class='h_date'>" . $created_at . "</div>";
            $html .= "<div class='h_user'>";
            $thumbnail_url = User::getThumbnailURLForPicture($user->fields['picture']);
            $style = !empty($thumbnail_url) ? "background-image: url(\"$thumbnail_url\"); background-color: inherit;" : ("background-color: " . $user->getUserInitialsBgColor());
            $html .= '<a href="' . $user->getLinkURL() . '">';
            $html .= "<span class='avatar avatar-md rounded' style='{$style}'>";
            if (empty($thumbnail_url)) {
                $html .= $user->getUserInitials();
            }
            $html .= '</span></a>';
            $html .= "</div>"; // h_user
            $html .= "</div>"; //h_info

            $html .= "<div class='h_content KnowbaseItemComment'>";
            $html .= "<div class='displayed_content ms-2'>";

            if ($cancomment) {
                if (Session::getLoginUserID() == $comment['users_id']) {
                    $html .= "<span class='ti ti-edit edit_item pointer'
                  data-kbitem_id='{$comment['items_id']}'
                  data-itemtype='$itemtype'
                  data-id='{$comment['id']}'></span>";
                }
            }

            $ct = htmlspecialchars_decode($comment['content']);
            $html .= "<div class='item_content'>";
            $html .= "<div style='display: flex; gap: 5px'>";
            if($comment["itemtype"] == PluginDlteamsTicketTask::class){
            $html .= "<div class='badge user-select-auto text-wrap d-none d-md-block mr-2' style='text-align: right; width: fit-content'>Id ".$comment["id"]."</div>";
                $tt = new TicketTask();
                $tt->getFromDB($comment["items_id"]);
                if ($tt->fields["tickettasks_id"]){
                    $html .= "<div class='badge user-select-auto text-wrap d-none d-md-block mr-2' style='text-align: right; width: fit-content'>message de Planification <a target='_blank' style='color: white' href='".TicketTask::getFormURLWithID($comment["items_id"])."'>".$comment["items_id"].
                        "&nbsp;<i class='fa fa-external-link'></i></a> suite de la tâche <a target='_blank' style='color: white' href='".TicketTask::getFormURLWithID($tt->fields["tickettasks_id"])."'>".$tt->fields["tickettasks_id"]." &nbsp;<i class='fa fa-external-link'></i></a></div>";
/*                    highlight_string("<?php\n\$data =\n" . var_export($comment, true) . ";\n?>");*/
                }
                else
                    $html .= "<div class='badge user-select-auto text-wrap d-none d-md-block mr-2' style='text-align: right; width: fit-content'>Tâche <a style='color: white' target='_blank' href='".TicketTask::getFormURLWithID($comment["items_id"])."'>".$comment["items_id"]."&nbsp;<i class='fa fa-external-link'></i></a></div>";
            }
            else
                $html .= "<div class='badge user-select-auto text-wrap d-none d-md-block mr-2' style='text-align: right; width: fit-content; background-color: #e5b553'>Id ".$comment["id"]."</div>";
            $html .= "</div>";
//            if(isset($comment["ischild_comment"]) && $comment["ischild_comment"]){
//                $html .= "<div style='text-align: right'>Tâche <a target='_blank' href='".TicketTask::getFormURLWithID($comment["items_id"])."'>".$comment["items_id"]."&nbsp;<i class='fa fa-external-link'></i></a></div>";
//            }

            $html .= "<p>{$ct}</p>";
            $html .= "</div>";
            $html .= "</div>"; // displayed_content

            if ($cancomment) {
                $html .= "<span class='add_answer' title='" . __('Add an answer') . "'
               data-kbitem_id='{$comment['items_id']}'
                data-itemtype='$itemtype'
               data-id='{$comment['id']}'></span>";
            }

            $html .= "</div>"; //end h_content
            $html .= "</div>";

            if (isset($comment['answers']) && count($comment['answers']) > 0) {
//                var_dump("zzz");
//                die();
                $html .= "<input type='checkbox' id='toggle_{$comment['id']}'
                             class='toggle_comments' checked='checked'>";
                $html .= "<label for='toggle_{$comment['id']}' class='toggle_label'>&nbsp;</label>";
                $html .= "<ul>";
                $html .= self::displayComments($comment['answers'], $cancomment, $itemtype, $level + 1);
                $html .= "</ul>";
            }

            $html .= "</li>";
        }
        return $html;
    }

    /**
     * Get comment form
     *
     * @param integer       $kbitem_id Knowbase item ID
     * @param string        $lang      Related item language
     * @param false|integer $edit      Comment id to edit, or false
     * @param false|integer $answer    Comment id to answer to, or false
     * @return string
     */
    public static function getCommentForm($items_id, $itemtype, $edit = false, $answer = false)
    {
        $rand   = mt_rand();

        $content = '';
        if ($edit !== false) {
            $comment = new ITILFollowup();
            $comment->getFromDB($edit);
            $content = $comment->fields['content'];
        }

        $html = '';
        $html .= "<form name='kbcomment_form$rand' id='kbcomment_form$rand'
                      class='comment_form' method='post'
            action='" . Toolbox::getItemTypeFormURL(__CLASS__) . "'>";

        $html .= "<table class='tab_cadre_fixe'>";

        $form_title = ($edit === false ? __('New comment') : __('Edit comment'));
        $html .= "<tr class='tab_bg_2'><th colspan='3'>$form_title</th></tr>";

        $html .= "<tr class='tab_bg_1'><td><label for='comment'>" . _n('Comment', 'Comments', 1) . "</label>
         &nbsp;<span class='red'>*</span></td><td style='width: 60%'>";
        $cols = 100;
        $rows = 60;
        $html .= Html::textarea([
            "display" => false,
            "id" => "comment",
            "enable_richtext" => true,
            'cols' => $cols,
            'rows' => $rows,
            'name' => 'content',
            "value" => $content]);
        $html .= "</td><td class='center'>";

        $btn_text = _sx('button', 'Add');
        $btn_name = 'add';

        if ($edit !== false) {
            $btn_text = _sx('button', 'Edit');
            $btn_name = 'edit';
        }
        $html .= "<input type='submit' name='$btn_name' value='{$btn_text}' class='btn btn-primary'>";
        if ($edit !== false || $answer !== false) {
            $html .= "<input type='reset' name='cancel' value='" . __('Cancel') . "' class='btn btn-primary'>";
        }

        $html .= "<input type='hidden' name='items_id' value='$items_id'>";
        $html .= "<input type='hidden' name='itemtype' value='$itemtype'>";
//        if ($lang !== null) {
//            $html .= "<input type='hidden' name='language' value='$lang'>";
//        }
        if ($answer !== false) {
            $html .= "<input type='hidden' name='parent_comment_id' value='{$answer}'/>";
        }
        if ($edit !== false) {
            $html .= "<input type='hidden' name='id' value='{$edit}'/>";
        }

        $html .= "</td></tr>";
        $html .= "</table>";
        $html .= Html::closeForm(false);
        return $html;
    }

    public function prepareInputForAdd($input)
    {
        if (!isset($input["users_id"])) {
            $input["users_id"] = 0;
            if ($uid = Session::getLoginUserID()) {
                $input["users_id"] = $uid;
            }
        }

        return $input;
    }

    function rawSearchOptions() {

        $tab = [];

        $tab[] = [
            'id'                 => 'common',
            'name'               => __("Characteristics")
        ];

        $tab[] = [
            'id'                 => '1',
            'table'              => $this->getTable(),
            'field'              => 'itemtype',
            'name'               => __("Objet"),
            'datatype'           => 'specific',
            'massiveaction'      => false,
            'autocomplete'       => true,
        ];


        $tab[] = [
            'id'                 => '2',
            'table'              => $this->getTable(),
            'field'              => 'items_id',
            'name'               => __("Elément"),
            'datatype'           => 'specific',
            'toview'             => true,
            'massiveaction'      => true,
        ];

        $tab[] = [
            'id' => '3',
            'table' => $this->getTable(),
            'field' => 'content',
            'name' => __("Contenu", 'dlteams'),
            'massiveaction' => true,
            'htmltext' => true
        ];

        $tab[] = [
            'id'                 => '4',
            'table'              => $this->getTable(),
            'field'              => 'date_creation',
            'name'               => __('Creation date'),
            'datatype'           => 'datetime',
            'massiveaction'      => false
        ];

        return $tab;

    }

//    public static function getSpecificValueToDisplay($field, $values, array $options = [])
//    {
//        var_dump("rretyty");
//        die();
//        return 'zzz';
//    }
}
