{#
# ---------------------------------------------------------------------
#
# GLPI - Gestionnaire Libre de Parc Informatique
#
# http://glpi-project.org
#
# @copyright 2015-2023 Teclib' and contributors.
# @copyright 2003-2014 by the INDEPNET Development Team.
# @licence   https://www.gnu.org/licenses/gpl-3.0.html
#
# ---------------------------------------------------------------------
#
# LICENSE
#
# This file is part of GLPI.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# ---------------------------------------------------------------------
#}

{% extends 'components/itilobject/timeline/form_timeline_item.html.twig' %}
{% import 'components/form/fields_macros.html.twig' as fields %}

{% set params = {'item': item}|merge(params|default({})) %}

{% set candedit = item.maySolve() %}
{% set can_read_kb = has_profile_right('knowbase', constant('READ')) or has_profile_right('knowbase', constant('KnowbaseItem::READFAQ')) %}
{% set can_update_kb = has_profile_right('knowbase', constant('UPDATE')) %}
{% set nokb = params['nokb'] is defined or params['nokb'] == true %}
{% set rand = random() %}

{% block timeline_card %}

        <div class="itilfollowup">
            <form name="asset_form" style="width: 100%;" class="d-flex flex-column" method="post"
                  action="/marketplace/dlteams/front/ticketnotification.form.php" enctype="multipart/form-data" data-track-changes="true" data-submit-once>
                <input type="hidden" name="itemtype" value="{{ item.getType() }}" />
                <input type="hidden" name="tickets_id" value="{{ item.fields['id'] }}" />
                {{ call_plugin_hook('pre_item_form', {"item": subitem, 'options': params}) }}

                {% set add_reopen = (_get['_openfollowup'] ?? false) or item.needReopen() %}
                {% if add_reopen %}
                    <input type="hidden" name="add_reopen" value="1" />
                {% endif %}

                <div class="row mx-n3 mx-xxl-auto">
                    <div class="col-12">
                        <label>Objet du mail de notification</label>
                        {{ fields.textField(
                            'object_notification',
                            subitem.fields['object_notification'],
                            '',
                            {
                                rand: '',
                                label_class: 'col-12',
                                input_class: 'col-12',
                            }
                        ) }}
                    </div>

                    <div class="col-12">
                        <label>Texte de notification</label>
                        {{ fields.textareaField(
                            'notification_text',
                            subitem.fields['notification_text'],
                            '',
                            {
                                'full_width': true,
                                'no_label': true,
                                'enable_richtext': true,
                                'enable_fileupload': true,
                                'enable_mentions': true,
                                'entities_id': item.fields['entities_id'],
                                'rand': rand,
                                'required': add_reopen
                            }
                        ) }}
                    </div>

{#                    <div class="col-12">#}
{#                        <label>Texte d'approbation</label>#}
{#                        {{ fields.textField(#}
{#                            'approbation_text',#}
{#                            subitem.fields['approbation_text'],#}
{#                            '',#}
{#                            {#}
{#                                rand: '',#}
{#                                label_class: 'col-12',#}
{#                                input_class: 'col-12',#}
{#                            }#}
{#                        ) }}#}
{#                    </div>#}

{#                    <div class="col-12">#}
{#                        <label>Texte d'approbation</label>#}
{#                        {{ fields.textareaField(#}
{#                            'approbation_text',#}
{#                            subitem.fields['approbation_text'],#}
{#                            '',#}
{#                            {#}
{#                                'full_width': true,#}
{#                                'no_label': true,#}
{#                                'enable_richtext': true,#}
{#                                'enable_fileupload': true,#}
{#                                'enable_mentions': true,#}
{#                                'entities_id': item.fields['entities_id'],#}
{#                                'rand': rand,#}
{#                                'required': add_reopen#}
{#                            }#}
{#                        ) }}#}
{#                    </div>#}

                    <div style="display: flex; gap: 5px;" class="col-12">
{#                        <label>Destinataire</label>#}
                        {{ fields.dropdownItemsFromItemtypes(
                            '',
                            'Destinataire',
                            {
                                'itemtypes': ['User', 'Contact'],
                                'checkright': true,
                                'ajax_page': "/marketplace/dlteams/ajax/dlteamsDropdownAllItem.php",
                                'entity': item.fields['entities_id'],
                                'rand': rand
                            }
                        ) }}
                    </div>

                </div>

                {{ call_plugin_hook('post_item_form', {"item": subitem, 'options': params}) }}
                {# Fixed min-height ensure no height increase when toggling the pending reason button, as select 2 dropdown are a bit higher than the default footer height #}
                <div class="d-flex card-footer mx-n3 mb-n3 flex-wrap" style="row-gap: 10px; min-height: 79px">
                    {% set pending_reasons %}
                        {% set show_pending_reasons_actions = item.fields['status'] == constant('CommonITILObject::WAITING') and not add_reopen %}
                        {% if get_current_interface() == 'central' and item.isAllowedStatus(item.fields['status'], constant('CommonITILObject::WAITING')) and call('PendingReason_Item::canDisplayPendingReasonForItem', [subitem]) %}
                            <span
                                    class="input-group-text bg-yellow-lt py-0 pe-0 {{ show_pending_reasons_actions ? 'flex-fill' : '' }}"
                                    id="pending-reasons-control-{{ rand }}"
                            >
                        <span class="d-inline-flex align-items-center" title="{{ __("Set the status to pending") }}"
                              data-bs-toggle="tooltip" data-bs-placement="top" role="button">
                           <i class="fas fa-pause me-2"></i>
                           <label class="form-check form-switch mt-2">
                              <input type="hidden"   name="pending" value="0" />
                              <input type="checkbox" name="pending" value="1" class="form-check-input"
                                     id="enable-pending-reasons-{{ rand }}"
                                     role="button"
                                    {{ item.fields['status'] == constant('CommonITILObject::WAITING') and not add_reopen ? 'checked' : '' }}
                                    data-bs-toggle="collapse" data-bs-target="#pending-reasons-setup-{{ rand }}" />
                           </label>
                        </span>

                        <div
                                class="collapse ps-2 py-1 flex-fill {{ show_pending_reasons_actions ? 'show' : '' }}"
                                aria-expanded="{{ show_pending_reasons_actions ? 'true' : 'false' }}"
                                id="pending-reasons-setup-{{ rand }}"
                        >
                           {{ include('components/itilobject/timeline/pending_reasons.html.twig') }}
                        </div>
                     </span>
                        {% endif %}
                    {% endset %}

                    {% if subitem.fields['id'] <= 0 %}
                        {# Do not enable flex wrapping when creating a new item as the pending form will be merged with the add button in an input group #}
                        <div class="input-group flex-nowrap">
{#                            <button class="btn btn-primary" type="submit" name="save_notification_data">#}
{#                                <i class="fas fa-plus"></i>#}
{#                                <span>{{ _x('button', 'Enr√©gistrer') }}</span>#}
{#                            </button>#}
                            <button class="btn btn-primary" type="submit" name="send_notification">
{#                                                                <i class="fas fa-plus"></i>#}
                                <span>{{ _x('button', 'Envoyer la notification') }}</span>
                            </button>
{#                            <button class="btn btn-primary" type="submit" name="send_approval">#}
{#                                #}{#                                <i class="fas fa-plus"></i>#}
{#                                <span>{{ _x('button', 'Demander une approbation') }}</span>#}
{#                            </button>#}
{#                            <button class="btn btn-primary" type="submit" name="send_notification_and_approval">#}
{#                                #}{#                                <i class="fas fa-plus"></i>#}
{#                                <span>{{ _x('button', 'Notifier + demander approbation') }}</span>#}
{#                            </button>#}
                        </div>
                  {% endif %}
                </div>

                <input type="hidden" name="_glpi_csrf_token" value="{{ csrf_token() }}" />
            </form>
        </div>

        <script type="text/javascript">
            function itilfollowuptemplate_update{{ rand }}(value) {
                $.ajax({
                    url: '{{ path('/ajax/itilfollowup.php') }}',
                    type: 'POST',
                    data: {
                        itilfollowuptemplates_id: value,
                        items_id: '{{ item.fields['id'] }}',
                        itemtype: '{{ item.getType() }}'
                    }
                }).done(function (data) {
                    var requesttypes_id = isNaN(parseInt(data.requesttypes_id))
                        ? 0
                        : parseInt(data.requesttypes_id);

                    // set textarea content
                    setRichTextEditorContent("content_{{ rand }}", data.content);
                    // set category
                    //need to create new DOM option, because SELECT is remotely-sourced (AJAX)
                    //see : https://select2.org/programmatic-control/add-select-clear-items#preselecting-options-in-an-remotely-sourced-ajax-select2
                    var newOption = new Option(data.requesttypes_name, requesttypes_id, true, true);
                    $("#dropdown_requesttypes_id{{ rand }}").append(newOption).trigger('change');

                    // set is_private
                    $("#is_private_{{ rand }}")
                        .prop("checked", data.is_private == "0"
                            ? false
                            : true);
                });
            }
        </script>

{% endblock %}
